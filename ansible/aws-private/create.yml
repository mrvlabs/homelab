---
- name: Create a fully-private VPC + EC2 reachable via SSM only
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars.yml
  collections:
    - amazon.aws

  tasks:
    - name: AMI | Get latest Amazon Linux 2023 x86_64 (if ami_id not specified)
      ec2_ami_info:
        region: "{{ region }}"
        owners: ["amazon"]
        filters:
          name: "al2023-ami-*x86_64*"
          architecture: "x86_64"
          state: "available"
      when: ami_id | length == 0
      register: ami_info

    - name: AMI | Choose most recent
      set_fact:
        effective_ami_id: "{{ (ami_info.images | sort(attribute='creation_date') | last).image_id }}"
      when: ami_id | length == 0

    - name: AMI | Use provided AMI if given
      set_fact:
        effective_ami_id: "{{ ami_id }}"
      when: ami_id | length > 0

    - name: VPC | Create
      ec2_vpc_net:
        name: "{{ project_name }}-vpc"
        cidr_block: "{{ vpc_cidr }}"
        dns_support: true
        dns_hostnames: true
        region: "{{ region }}"
        state: present
        tags:
          Project: "{{ project_name }}"
      register: vpc

    - name: Subnet | Private (no public IP mapping)
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ private_subnet_cidr }}"
        az: "{{ az }}"
        map_public: false
        state: present
        region: "{{ region }}"
        tags:
          Name: "{{ project_name }}-private-a"
          Project: "{{ project_name }}"
      register: private_subnet

    - name: Route table | Private (no default 0.0.0.0/0)
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "{{ project_name }}-private-rt"
          Project: "{{ project_name }}"
        subnets:
          - "{{ private_subnet.subnet.id }}"
        # No extra routes -> only 'local' exists
      register: private_rt

    # Security Groups
    - name: SG | Instance (no ingress; egress allowed)
      ec2_security_group:
        name: "{{ project_name }}-sg-instance"
        description: "Instance SG (no ingress; egress for SSM)"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
        purge_rules: true
        purge_rules_egress: true
        rules: []            # no inbound
        rules_egress:
          - proto: "-1"
            from_port: 0
            to_port: 0
            cidr_ip: "0.0.0.0/0"   # safe: no IGW/NAT route exists
        tags:
            Project: "{{ project_name }}"
      register: sg_instance

    - name: SG | VPC Endpoints (allow 443 from instance SG)
      ec2_security_group:
        name: "{{ project_name }}-sg-vpce"
        description: "VPC Endpoint SG (allow HTTPS from instance)"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
        purge_rules: true
        purge_rules_egress: true
        rules:
          - proto: tcp
            ports: 443
            group_id: "{{ sg_instance.group_id }}"
            rule_desc: "HTTPS from instance SG"
        rules_egress:
          - proto: "-1"
            from_port: 0
            to_port: 0
            cidr_ip: "0.0.0.0/0"
        tags:
          Project: "{{ project_name }}"
      register: sg_vpce

    # VPC Endpoints for SSM Session Manager (private only)
    - name: VPCE | Create interface endpoints for SSM set
      ec2_vpc_endpoint:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        service: "com.amazonaws.{{ region }}.{{ item }}"
        vpc_endpoint_type: Interface
        security_group_ids:
          - "{{ sg_vpce.group_id }}"
        subnet_ids:
          - "{{ private_subnet.subnet.id }}"
        private_dns_enabled: true
        state: present
        tags:
          Name: "{{ project_name }}-vpce-{{ item }}"
          Project: "{{ project_name }}"
      loop: "{{ endpoint_services }}"
      when: enable_vpc_endpoints | bool
      register: vpce_ifaces

    - name: VPCE | S3 Gateway endpoint for private access to S3 (optional)
      ec2_vpc_endpoint:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        service: "com.amazonaws.{{ region }}.s3"
        vpc_endpoint_type: Gateway
        route_table_ids:
          - "{{ private_rt.route_table.id }}"
        state: present
        tags:
          Name: "{{ project_name }}-vpce-s3"
          Project: "{{ project_name }}"
      when: enable_s3_gateway_endpoint | bool
      register: vpce_s3

    # (Optional extras)
    - name: VPCE | CloudWatch Logs (interface)
      ec2_vpc_endpoint:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        service: "com.amazonaws.{{ region }}.logs"
        vpc_endpoint_type: Interface
        security_group_ids:
          - "{{ sg_vpce.group_id }}"
        subnet_ids:
          - "{{ private_subnet.subnet.id }}"
        private_dns_enabled: true
        state: present
        tags:
          Name: "{{ project_name }}-vpce-logs"
          Project: "{{ project_name }}"
      when: enable_cloudwatch_logs_endpoint | bool

    - name: VPCE | KMS (interface)
      ec2_vpc_endpoint:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        service: "com.amazonaws.{{ region }}.kms"
        vpc_endpoint_type: Interface
        security_group_ids:
          - "{{ sg_vpce.group_id }}"
        subnet_ids:
          - "{{ private_subnet.subnet.id }}"
        private_dns_enabled: true
        state: present
        tags:
          Name: "{{ project_name }}-vpce-kms"
          Project: "{{ project_name }}"
      when: enable_kms_endpoint | bool

    # Instance role for SSM
    - name: IAM | Role for EC2 with SSM access
      iam_role:
        name: "{{ project_name }}-ec2-ssm-role"
        assume_role_policy_document: |
          {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Principal": { "Service": "ec2.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }]
          }
        state: present

    - name: IAM | Attach AmazonSSMManagedInstanceCore
      iam_managed_policy:
        policy_arn: arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        state: present
        iam_type: role
        iam_name: "{{ project_name }}-ec2-ssm-role"

    - name: IAM | Instance profile
      iam_instance_profile:
        name: "{{ project_name }}-ec2-ssm-profile"
        state: present
        roles:
          - "{{ project_name }}-ec2-ssm-role"

    # Launch in private subnet (no public IPs)
    - name: EC2 | Launch private instance (SSM-only)
      ec2_instance:
        name: "{{ project_name }}-instance"
        region: "{{ region }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ effective_ami_id }}"
        network:
          assign_public_ip: false
          subnet_id: "{{ private_subnet.subnet.id }}"
          security_group_id: "{{ sg_instance.group_id }}"
        iam_instance_profile: "{{ project_name }}-ec2-ssm-profile"
        wait: true
        tags:
          Project: "{{ project_name }}"
          Name: "{{ project_name }}-instance"
      register: ec2

    - name: OUTPUT | Connection instructions
      ansible.builtin.debug:
        msg:
          - "InstanceId: {{ ec2.instances[0].id }}"
          - "Subnet (private): {{ private_subnet.subnet.id }}"
          - "Public IP: none (by design)"
          - "Connect with SSM:"
          - "aws ssm start-session --region {{ region }} --target {{ ec2.instances[0].id }}"
