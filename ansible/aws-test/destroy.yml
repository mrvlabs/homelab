---
- name: Destroy everything created for this project
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars.yml
  
  collections:
    - amazon.aws
  
  tasks:
    - name: Find instance by tag
      ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Project": "{{ project_name }}"
          instance-state-name: ["pending","running", "stopping","stopped"]
      register: ec2_info
    
    - name: Terminate instance(s)
      ec2_instance:
        region: "{{ region }}"
        instance_ids: "{{ ec2_info.instances | map(attribute='instance_id') | list }}"
        state: absent
        wait: true
      when: ec2_info.instances | length > 0
    
    - name: Detach and delete instance profile
      iam_instance_profile:
        name: "{{ project_name }}-ec2-ssm-profile"
        state: absent
    
    - name: Detach SSM policy and delete role
      iam_managed_policy:
        policy_arn: arn:aws:iam::aws:policy/AmazonSSMManagedIInstanceCore
        state: absent
        iam_type: role
        iam_name: "{{ project_name }}-ec2-ssm-role"
      ignore_errors: true
    
    - name: Delete IAM role
      iam_role:
        name: "{{ project_name }}-ec2-ssm-role"
        state: absent
      ignore_errors: true
    
    - name: Lookup VPC by tag
      ec2_vpc_net_info:
        region: "{{ region }}"
        filters:
          "tag:Project": "{{ project_name }}"
      register: vpc_info
    
    - name: Set VPC ID fact
      set_fact:
        vpc_id: "{{ (vpc_info.vpcs | first).vpc_id }}"
      when: vpc_info.vpcs | length > 0
    
    - name: Find SG in VPC
      ec2_group_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
          group-name: "{{ project_name }}-sg"
      when: vpc_id is defined
      register: sg_info
    
    - name: Delete SG
      ec2_security_group:
        region: "{{ region }}"
        state: absent
        group_id: "{{ (sg_info.security_groups | first).group_id }}"
      when: sg_info.security_groups | length > 0
    
    - name: Find and delete route table
      ec2_vpc_route_table_info:
        region: "{{ region }}"
        filters:
          "tag:Name": "{{ project_name }}-public-rt"
      register: rt_info
      when: vpc_id is defined

    - name: Disassociate and delte route table
      ec2_vpc_route_table:
        region: "{{ region }}"
        route_table_id: "{{ (rt_info.route_tables | first).id }}"
        state: absent
      when: rt_info.route_tables | length > 0
    
    - name: Find and delete subnet
      ec2_vpc_subnet_info:
        region: "{{ region }}"
        filters:
          "tag:Name": "{{ project_name }}-public-a"
      register: subnet_info
      when: vpc_id is defined

    - name: Delete subnet
      ec2_vpc_subnet:
        region: "{{ region }}"
        state: absent
        vpc_id: "{{ vpc_id }}"
        cidr: "{{ public_subnet_cidr }}"
      when: subnet_info.subnets | length > 0
    
    - name: Detach & delete IGW
      ec2_vpc_igw:
        vpc_id: "{{ vpc_id }}"
        state: absent
        region: "{{ region }}"
      when: vpc_id is defined
    
    - name: Delete VPC
      ec2_vpc_net:
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        state: absent
      when: vpc_id is defined
    
    - name: Delete key pair (if named)
      ec2_key:
        name: "{{ key_name }}"
        region: "{{ region }}"
        state: absent
      when: key_name | length > 0
    
    - name: Final message
      ansible.builtin.debug:
        msg: "All resources for {{ project_name }} removed where present"